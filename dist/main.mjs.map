{"version":3,"sources":["../src/code/helpers/cli.ts","../src/code/modules/create.ts","../src/code/main.ts"],"sourcesContent":["/**\r\n * @name                                    cli.js\r\n * @description                             command-line interface\r\n*/\r\n\r\n\r\n/* ---------------------------------------- PACK ----------------------------------------  */\r\n\r\n    import { Command }                      from 'commander';\r\n\r\n/* ---------------------------------------- ---- ----------------------------------------  */\r\n\r\n\r\n/* ---------------------------------------- INIT ----------------------------------------  */\r\n\r\n    interface Data\r\n    {\r\n        options: [string, string][];\r\n\r\n        project:\r\n        {\r\n            name: string;\r\n            version: string;\r\n            description: string;\r\n        };\r\n    }\r\n\r\n    interface Core\r\n    {\r\n        events?:\r\n        {\r\n            onBeg?: () => void;\r\n            onEnd?: () => void;\r\n        };\r\n\r\n        actions:\r\n        {\r\n            [key: string]: (options: any) => Promise<void>;\r\n        };\r\n    }\r\n\r\n    const program = new Command();\r\n\r\n/* ---------------------------------------- ---- ----------------------------------------  */\r\n\r\n/* ---------------------------------------- CORE ----------------------------------------  */\r\n\r\n    /**\r\n     * A function that handles command-line interface operations.\r\n     *\r\n     * @param {Data} data - The data object containing options and project information.\r\n     * @param {Core} core - The core object with event handlers and actions.\r\n     * @return {Promise<void>} This function does not return anything explicitly.\r\n     */\r\n    const CLI\r\n    = async function ({ data, core }: { data: Data; core: Core })\r\n    : Promise<void>\r\n    {\r\n        for (let i = 0; i < data.options.length; i++) {\r\n            program.option(data.options[i][0], data.options[i][1]);\r\n        }\r\n\r\n        program\r\n            .name(data.project.name)\r\n            .version(data.project.version)\r\n            .description(data.project.description)\r\n            .action(async () => {\r\n                // Get options\r\n                const options = program.opts();\r\n\r\n                // Trigger onBeg event\r\n                if (core.events && core.events.onBeg) core.events.onBeg();\r\n\r\n                // Trigger action\r\n                const actionKeys = Object.keys(core.actions);\r\n                for (let i = 0; i < actionKeys.length; i++) {\r\n                    if (options[actionKeys[i]]) await core.actions[actionKeys[i]](options);\r\n                }\r\n\r\n                // Trigger onEnd event\r\n                if (core.events && core.events.onEnd) core.events.onEnd();\r\n            });\r\n\r\n        program.parse(process.argv);\r\n    };\r\n\r\n    export { CLI, Data, Core };\r\n\r\n/* ---------------------------------------- ---- ----------------------------------------  */","/**\r\n * @name                                    create.ts\r\n * @description                             create module\r\n*/\r\n\r\n\r\n/* ---------------------------------------- PACK ----------------------------------------  */\r\n\r\n    import path                             from 'path';\r\n    import fs                               from 'fs';\r\n    import { exec }                         from 'child_process';\r\n\r\n/* ---------------------------------------- ---- ----------------------------------------  */\r\n\r\n\r\n/* ---------------------------------------- INIT ----------------------------------------  */\r\n\r\n    export default                          async function (args: any)\r\n    : Promise<void>\r\n    {\r\n        try\r\n        {\r\n            // Checks\r\n            if(!args.as) throw 'Project type is required, use --as <type>';\r\n\r\n            // Extract the arguments\r\n            const name                  = args.create;\r\n            const type                  = args.as;\r\n            const force                 = typeof args.force === 'undefined' ? false : true;\r\n\r\n            // Clone the project repo\r\n            await CloneRepo({ name, type, force });\r\n        }\r\n\r\n        catch (error)\r\n        {\r\n            console.log(`Failed to create the project : ${error}`);\r\n        }\r\n    };\r\n\r\n/* ---------------------------------------- ---- ----------------------------------------  */\r\n\r\n\r\n/* ---------------------------------------- HELP ----------------------------------------  */\r\n\r\n    interface CloneRepoOptions\r\n    {\r\n        name        : string;\r\n        type        : 'npm' | 'electron';\r\n        force       : boolean;\r\n    }\r\n\r\n    async function CloneRepo({ name, type, force }: CloneRepoOptions): Promise<string> {\r\n        const rootPath = path.join(process.cwd(), name);\r\n\r\n        // Get/Set the repo info\r\n        const owner : string = 'maysara-elshewehy';\r\n        const repo  : string = { npm: 'dummy-npm-package', electron: 'dummy-electron-app' }[type];\r\n\r\n        // Check if the repo type is valid\r\n        if (!repo) throw new Error('Invalid project type');\r\n        // Check if the folder already exists\r\n        if (fs.existsSync(rootPath)) {\r\n            if (!force) throw new Error('Folder already exists');\r\n            else fs.rmSync(rootPath, { recursive: true });\r\n        }\r\n\r\n        // Clone the repo\r\n        const command = `git clone https://github.com/${owner}/${repo}.git ${name}`;\r\n        await new Promise<void>((resolve, reject) => {\r\n            exec(command, (error, stdout, stderr) => {\r\n                if (error) reject(error);\r\n                else resolve();\r\n            });\r\n        });\r\n\r\n        // Remove the .git folder\r\n        fs.rmSync(path.join(rootPath, '.git'), { recursive: true });\r\n\r\n        // Return the root folder\r\n        return rootPath;\r\n    }\r\n\r\n/* ---------------------------------------- ---- ----------------------------------------  */","#!/usr/bin/env node\r\n\r\n/**\r\n * @name                                    main.ts\r\n * @description                             main file of the project\r\n*/\r\n\r\n\r\n/* ---------------------------------------- PACK ----------------------------------------  */\r\n\r\n    import { CLI }                          from './helpers/cli';\r\n    import create                           from './modules/create';\r\n\r\n/* ---------------------------------------- ---- ----------------------------------------  */\r\n\r\n\r\n/* ---------------------------------------- INIT ----------------------------------------  */\r\n\r\n    const Main                              = async function ()\r\n    {\r\n        // Run the CLI application\r\n        await CLI\r\n        ({\r\n            data                            :\r\n            {\r\n                project                     :\r\n                {\r\n                    name                    : 'nutty',\r\n                    description             : 'A simple package for creating projects faster',\r\n                    version                 : '0.0.0',\r\n                },\r\n\r\n                options                     :\r\n                [\r\n                    ['-c, --create <name>'  , 'create a new project'],\r\n                    ['--as <type>'          , 'project type (npm, electron, ..)'],\r\n                    ['-f, --force'          , 'force create a new project'],\r\n                ]\r\n            },\r\n\r\n            core                            :\r\n            {\r\n                actions                     :\r\n                {\r\n                    create\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    export default                          Main();\r\n\r\n/* ---------------------------------------- ---- ----------------------------------------  */"],"mappings":"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","names":[]}